#!/bin/bash

# Pre-Requisites
az config set extension.use_dynamic_install=yes_without_prompt
echo validating pre-requisites
az extension add --name virtual-wan 
az extension add --name azure-firewall 
# or updating vWAN and AzFirewall CLI extensions
az extension update --name virtual-wan
az extension update --name azure-firewall 

# Parameters (make changes based on your requirements)
SubscriptionID="7964825c-fb12-4906-8cb9-a072355dc0f0"  # fdpo
SubscriptionID="af3717f4-48d1-42d5-8b79-453a28496737"  # xe-connectivity
SubscriptionID="2b73f762-264b-40ac-9ade-a1f95c5b2195" # Shared Services
region1=eastus #set region1
region2=westus #set region2
rg=lab-vwan #set resource group
vwanname=vwan-intra #set vWAN name
hub1name=vhub1-$region1 #set Hub1 name
hub2name=vhub2-$region2 #set Hub2 name
branch1name=branch1-$region1 #set Branch1 name
branch2name=branch2-$region2 #set Branch2 name
vmsize=Standard_B2s #set VM Size for all VMs
firewallsku=Standard #Azure Firewall SKU Standard or Premium
username=az-admin #set username
password="" #set password for all VMs

#Selections
vhub1Spokes=3 #of spokes to create, enter 1 or 2 or 3
vhub2Spokes=3 #of spokes to create, enter 1 or 2 or 3
vhub1VMs=3 #enter 1 or 2 or 3
vhub2VMs=3 #enter 1 or 2 or 3
vhub1firewall=true #enter true or false
vhub2firewall=true #enter true or false
firewallLogging=true #enter true or false
branch1Enabled=true #enter true or false
branch2Enabled=true #enter true or false


#Set subscription context
az account set --subscription $SubscriptionID

#Variables
#mypip=$(curl -4 ifconfig.io -s)
mypip="162.207.71.133"

# create rg
az group create -n $rg -l $region1 --output none

echo Creating vwan and both hubs...
# create virtual wan
az network vwan create -g $rg -n $vwanname --branch-to-branch-traffic true --location $region1 --type Standard --output none
az network vhub create -g $rg --name $hub1name --address-prefix 192.168.10.0/24 --vwan $vwanname --location $region1 --sku Standard --no-wait
az network vhub create -g $rg --name $hub2name --address-prefix 192.168.20.0/24 --vwan $vwanname --location $region2 --sku Standard --no-wait

echo Creating spoke VNETs...
# create spokes virtual network
# Region1

case $vhub1Spokes in
  1) 
  az network vnet create --address-prefixes 172.16.1.0/24 -n spk1-vnet -g $rg -l $region1 --subnet-name main --subnet-prefixes 172.16.1.0/27 --output none
  ;;
  2) 
  az network vnet create --address-prefixes 172.16.1.0/24 -n spk1-vnet -g $rg -l $region1 --subnet-name main --subnet-prefixes 172.16.1.0/27 --output none
  az network vnet create --address-prefixes 172.16.2.0/24 -n spk2-vnet -g $rg -l $region1 --subnet-name main --subnet-prefixes 172.16.2.0/27 --output none
  ;;
  3) 
  az network vnet create --address-prefixes 172.16.1.0/24 -n spk1-vnet -g $rg -l $region1 --subnet-name main --subnet-prefixes 172.16.1.0/27 --output none
  az network vnet create --address-prefixes 172.16.2.0/24 -n spk2-vnet -g $rg -l $region1 --subnet-name main --subnet-prefixes 172.16.2.0/27 --output none
  az network vnet create --address-prefixes 172.16.3.0/24 -n spk3-vnet -g $rg -l $region1 --subnet-name main --subnet-prefixes 172.16.3.0/27 --output none
  ;;
  *) 
  echo "No spokes to be created"
  ;; 
esac


# Region2

case $vhub2Spokes in
  1) 
  az network vnet create --address-prefixes 172.16.4.0/24 -n spk4-vnet -g $rg -l $region2 --subnet-name main --subnet-prefixes 172.16.4.0/27 --output none
  ;;
  2) 
  az network vnet create --address-prefixes 172.16.4.0/24 -n spk4-vnet -g $rg -l $region2 --subnet-name main --subnet-prefixes 172.16.4.0/27 --output none
  az network vnet create --address-prefixes 172.16.5.0/24 -n spk5-vnet -g $rg -l $region2 --subnet-name main --subnet-prefixes 172.16.5.0/27 --output none
  ;;
  3) 
  az network vnet create --address-prefixes 172.16.4.0/24 -n spk4-vnet -g $rg -l $region2 --subnet-name main --subnet-prefixes 172.16.4.0/27 --output none
  az network vnet create --address-prefixes 172.16.5.0/24 -n spk5-vnet -g $rg -l $region2 --subnet-name main --subnet-prefixes 172.16.5.0/27 --output none
  az network vnet create --address-prefixes 172.16.6.0/24 -n spk6-vnet -g $rg -l $region2 --subnet-name main --subnet-prefixes 172.16.6.0/27 --output none
  ;;
  *) 
  echo "nothing"
  ;; 
esac

echo Checking Hub1 provisioning status...
# Checking Hub1 provisioning and routing state 
prState=''
rtState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub show -g $rg -n $hub1name --query 'provisioningState' -o tsv)
    echo "$hub1name provisioningState="$prState
    sleep 5
done

while [[ $rtState != 'Provisioned' ]];
do
    rtState=$(az network vhub show -g $rg -n $hub1name --query 'routingState' -o tsv)
    echo "$hub1name routingState="$rtState
    sleep 5
done

echo Creating Hub1 vNET connections
# create spoke to Vwan connections to hub1

case $vhub1Spokes in
  1) 
  az network vhub connection create -n spk1-vnetconn --remote-vnet spk1-vnet -g $rg --vhub-name $hub1name --no-wait
  ;;
  2) 
  az network vhub connection create -n spk1-vnetconn --remote-vnet spk1-vnet -g $rg --vhub-name $hub1name --no-wait
  az network vhub connection create -n spk2-vnetconn --remote-vnet spk2-vnet -g $rg --vhub-name $hub1name --no-wait
  ;;
  3) 
  az network vhub connection create -n spk1-vnetconn --remote-vnet spk1-vnet -g $rg --vhub-name $hub1name --no-wait
  az network vhub connection create -n spk2-vnetconn --remote-vnet spk2-vnet -g $rg --vhub-name $hub1name --no-wait
  az network vhub connection create -n spk3-vnetconn --remote-vnet spk3-vnet -g $rg --vhub-name $hub1name --no-wait
  ;;
  *) 
  echo "Nothing"
  ;; 
esac

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spk1-vnetconn --vhub-name $hub1name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spk1-vnetconn provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spk2-vnetconn --vhub-name $hub1name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spk2-vnetconn provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spk3-vnetconn --vhub-name $hub1name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spk3-vnetconn provisioningState="$prState
    sleep 5
done

echo Checking Hub2 provisioning status...
# Checking Hub2 provisioning and routing state 
prState=''
rtState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub show -g $rg -n $hub2name --query 'provisioningState' -o tsv)
    echo "$hub2name provisioningState="$prState
    sleep 5
done

while [[ $rtState != 'Provisioned' ]];
do
    rtState=$(az network vhub show -g $rg -n $hub2name --query 'routingState' -o tsv)
    echo "$hub2name routingState="$rtState
    sleep 5
done

# create spoke to Vwan connections to hub2

case $vhub2Spokes in
  1) 
  az network vhub connection create -n spk4-vnetconn --remote-vnet spk4-vnet -g $rg --vhub-name $hub2name --no-wait
  ;;
  2) 
  az network vhub connection create -n spk4-vnetconn --remote-vnet spk4-vnet -g $rg --vhub-name $hub2name --no-wait
  az network vhub connection create -n spk5-vnetconn --remote-vnet spk5-vnet -g $rg --vhub-name $hub2name --no-wait
  ;;
  3) 
  az network vhub connection create -n spk4-vnetconn --remote-vnet spk4-vnet -g $rg --vhub-name $hub2name --no-wait
  az network vhub connection create -n spk5-vnetconn --remote-vnet spk5-vnet -g $rg --vhub-name $hub2name --no-wait
  az network vhub connection create -n spk6-vnetconn --remote-vnet spk6-vnet -g $rg --vhub-name $hub2name --no-wait
  ;;
  *) 
  echo "Nothing"
  ;; 
esac

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spk4-vnetconn --vhub-name $hub2name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spk4-vnetconn provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spk5-vnetconn --vhub-name $hub2name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spk5-vnetconn provisioningState="$prState
    sleep 5
done

prState=''
while [[ $prState != 'Succeeded' ]];
do
    prState=$(az network vhub connection show -n spk6-vnetconn --vhub-name $hub2name -g $rg  --query 'provisioningState' -o tsv)
    echo "vnet connection spk6-vnetconn provisioningState="$prState
    sleep 5
done

if [ $vhub1firewall  = 'true' ];
then
    echo Creating $hub1name Azure Firewall Policy
    #Create firewall rules
    fwpolicyname=$hub1name-fwpolicy #Firewall Policy Name
    az network firewall policy create --name $fwpolicyname --resource-group $rg --sku $firewallsku --enable-dns-proxy true --output none --only-show-errors
    az network firewall policy rule-collection-group create --name NetworkRuleCollectionGroup --priority 200 --policy-name $fwpolicyname --resource-group $rg --output none --only-show-errors
    #Adding any-to-any firewall rule
    az network firewall policy rule-collection-group collection add-filter-collection \
    --resource-group $rg \
    --policy-name $fwpolicyname \
    --name GenericCollection \
    --rcg-name NetworkRuleCollectionGroup \
    --rule-type NetworkRule \
    --rule-name AnytoAny \
    --action Allow \
    --ip-protocols "Any" \
    --source-addresses "*" \
    --destination-addresses  "*" \
    --destination-ports "*" \
    --collection-priority 100 \
    --output none

    echo Deploying Azure Firewall inside $hub1name vHub...
    fwpolid=$(az network firewall policy show --resource-group $rg --name $fwpolicyname --query id --output tsv)
    az network firewall create -g $rg -n $hub1name-azfw --sku AZFW_Hub --tier $firewallsku --virtual-hub $hub1name --public-ip-count 1 --firewall-policy $fwpolid --location $region1 --output none

    if [ $firewallLogging  = 'true' ];
    then
        echo Enabling $hub1name Azure Firewall diagnostics...
        ## Log Analytics workspace name. 
        Workspacename=$hub1name-$region1-Logs

        #Creating Log Analytics Workspaces
        az monitor log-analytics workspace create -g $rg --workspace-name $Workspacename --location $region1 --output none

        #EnablingAzure Firewall diagnostics
        #az monitor diagnostic-settings show -n toLogAnalytics -g $rg --resource $(az network firewall show --name $hub2name-azfw --resource-group $rg --query id -o tsv)
        az monitor diagnostic-settings create -n 'toLogAnalytics' \
        --resource $(az network firewall show --name $hub1name-azfw --resource-group $rg --query id -o tsv) \
        --workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $Workspacename --query id -o tsv) \
        --logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}, {"category":"AZFWApplicationRule","Enabled":true}, {"category":"AZFWApplicationRuleAggregation","Enabled":true}, {"category":"AZFWDnsQuery","Enabled":true}, {"category":"AZFWFatFlow","Enabled":true}, {"category":"AZFWFlowTrace","Enabled":true}, {"category":"AZFWFqdnResolveFailure","Enabled":true}, {"category":"AZFWIdpsSignature","Enabled":true}, {"category":"AZFWNatRule","Enabled":true}, {"category":"AZFWNatRuleAggregation","Enabled":true}, {"category":"AZFWNetworkRule","Enabled":true}, {"category":"AZFWNetworkRuleAggregation","Enabled":true}, {"category":"AZFWThreatIntel","Enabled":true}]' \
        --metrics '[{"category": "AllMetrics","enabled": true}]' \
        --output none
    fi
fi     
############################

if [ $vhub2firewall  = 'true' ];
then
    echo Creating $hub2name Azure Firewall Policy
    #Create firewall rules
    fwpolicyname=$hub2name-fwpolicy #Firewall Policy Name
    az network firewall policy create --name $fwpolicyname --resource-group $rg --sku $firewallsku --enable-dns-proxy true --output none --only-show-errors
    az network firewall policy rule-collection-group create --name NetworkRuleCollectionGroup --priority 200 --policy-name $fwpolicyname --resource-group $rg --output none --only-show-errors
    #Adding any-to-any firewall rule
    az network firewall policy rule-collection-group collection add-filter-collection \
    --resource-group $rg \
    --policy-name $fwpolicyname \
    --name GenericCollection \
    --rcg-name NetworkRuleCollectionGroup \
    --rule-type NetworkRule \
    --rule-name AnytoAny \
    --action Allow \
    --ip-protocols "Any" \
    --source-addresses "*" \
    --destination-addresses  "*" \
    --destination-ports "*" \
    --collection-priority 100 \
    --output none

    echo Deploying Azure Firewall inside $hub2name vHub...
    fwpolid=$(az network firewall policy show --resource-group $rg --name $fwpolicyname --query id --output tsv)
    az network firewall create -g $rg -n $hub2name-azfw --sku AZFW_Hub --tier $firewallsku --virtual-hub $hub2name --public-ip-count 1 --firewall-policy $fwpolid --location $region2 --output none

    if [ $firewallLogging  = 'true' ];
    then
        echo Enabling $hub2name Azure Firewall diagnostics...
        ## Log Analytics workspace name. 
        Workspacename=$hub2name-$region2-Logs

        #Creating Log Analytics Workspaces
        az monitor log-analytics workspace create -g $rg --workspace-name $Workspacename --location $region2 --output none

        #EnablingAzure Firewall diagnostics
        #az monitor diagnostic-settings show -n toLogAnalytics -g $rg --resource $(az network firewall show --name $hub2name-azfw --resource-group $rg --query id -o tsv)
        az monitor diagnostic-settings create -n 'toLogAnalytics' \
        --resource $(az network firewall show --name $hub2name-azfw --resource-group $rg --query id -o tsv) \
        --workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $Workspacename --query id -o tsv) \
        --logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}, {"category":"AZFWApplicationRule","Enabled":true}, {"category":"AZFWApplicationRuleAggregation","Enabled":true}, {"category":"AZFWDnsQuery","Enabled":true}, {"category":"AZFWFatFlow","Enabled":true}, {"category":"AZFWFlowTrace","Enabled":true}, {"category":"AZFWFqdnResolveFailure","Enabled":true}, {"category":"AZFWIdpsSignature","Enabled":true}, {"category":"AZFWNatRule","Enabled":true}, {"category":"AZFWNatRuleAggregation","Enabled":true}, {"category":"AZFWNetworkRule","Enabled":true}, {"category":"AZFWNetworkRuleAggregation","Enabled":true}, {"category":"AZFWThreatIntel","Enabled":true}]' \
        --metrics '[{"category": "AllMetrics","enabled": true}]' \
        --output none
    fi
fi
############################# Spoke VMs
echo Creating vhub1 Spoke VMs...
case $vhub1VMs in
  1) 
  az vm create -n spk1VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name spk1-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  ;;
  2) 
  az vm create -n spk1VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name spk1-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  az vm create -n spk2VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name spk2-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  ;;
  3) 
  az vm create -n spk1VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name spk1-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  az vm create -n spk2VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name spk2-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  az vm create -n spk3VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name spk3-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  ;;
  *) 
  echo "Nothing"
  ;; 
esac

echo Creating vhub2 Spoke VMs...
case $vhub2VMs in
  1) 
  az vm create -n spk4VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region2 --subnet main --vnet-name spk4-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  ;;
  2) 
  az vm create -n spk4VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region2 --subnet main --vnet-name spk4-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  az vm create -n spk5VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region2 --subnet main --vnet-name spk5-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  ;;
  3) 
  az vm create -n spk4VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region2 --subnet main --vnet-name spk4-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  az vm create -n spk5VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region2 --subnet main --vnet-name spk5-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  az vm create -n spk6VM -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region2 --subnet main --vnet-name spk6-vnet --admin-username $username --admin-password $password --no-wait --nsg ""
  ;;
  *) 
  echo "Nothing"
  ;; 
esac


#az vm create -n spk1VM -g $rg --image Win2019Datacenter --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name spoke1 --admin-username $username --admin-password $password --no-wait --nsg ""


#Enable boot diagnostics for all VMs in the resource group (Serial console)
#Create Storage Account (boot diagnostics + serial console)
let "randomIdentifier1=$RANDOM*$RANDOM" 
az storage account create -n sc$randomIdentifier1 -g $rg -l $region1 --sku Standard_LRS --allow-blob-public-access $false -o none
let "randomIdentifier2=$RANDOM*$RANDOM" 
az storage account create -n sc$randomIdentifier2 -g $rg -l $region2 --sku Standard_LRS --allow-blob-public-access $false -o none
#Enable boot diagnostics
stguri1=$(az storage account show -n sc$randomIdentifier1 -g $rg --query primaryEndpoints.blob -o tsv)
stguri2=$(az storage account show -n sc$randomIdentifier2 -g $rg --query primaryEndpoints.blob -o tsv)
az vm boot-diagnostics enable --storage $stguri1 --ids $(az vm list -g $rg --query '[?location==`'$region1'`].{id:id}' -o tsv) -o none
az vm boot-diagnostics enable --storage $stguri2 --ids $(az vm list -g $rg --query '[?location==`'$region2'`].{id:id}' -o tsv) -o none
### Install tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others (check link below for more details) 
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools.sh"
for vm in `az vm list -g $rg --query "[?storageProfile.imageReference.offer=='UbuntuServer'].name" -o tsv`
do
 az vm extension set \
 --resource-group $rg \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --no-wait
done

########################### Branches section #############################
if [ $branch1Enabled  = 'true' ];
    then
    echo Creating branches VNETs...
    # create location1 branch virtual network
    az network vnet create --address-prefixes 10.100.0.0/16 -n $branch1name -g $rg -l $region1 --subnet-name main --subnet-prefixes 10.100.0.0/24 --output none
    az network public-ip create -n $branch1name-vpngw-pip -g $rg --location $region1 --sku standard --output none
    az network vnet subnet create -g $rg --vnet-name $branch1name -n GatewaySubnet --address-prefixes 10.100.100.0/26 --output none
    az network vnet-gateway create -n $branch1name-vpngw --public-ip-addresses $branch1name-vpngw-pip -g $rg --vnet $branch1name --asn 65010 --gateway-type Vpn -l $region1 --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait 
    az vm create -n branch1VM  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region1 --subnet main --vnet-name $branch1name --admin-username $username --admin-password $password --nsg "" --no-wait
    az network vpn-gateway create -n $hub1name-vpngw -g $rg --location $region1 --vhub $hub1name --no-wait 
    echo Validating Branches VPN Gateways provisioning...
    #Branch1 VPN Gateways provisioning status
    prState=$(az network vnet-gateway show -g $rg -n $branch1name-vpngw --query provisioningState -o tsv)
    if [[ $prState == 'Failed' ]];
    then
        echo VPN Gateway is in fail state. Deleting and rebuilding.
        az network vnet-gateway delete -n $branch1name-vpngw -g $rg
        az network vnet-gateway create -n $branch1name-vpngw --public-ip-addresses $branch1name-vpngw-pip -g $rg --vnet $branch1name --asn 65010 --gateway-type Vpn -l $region1 --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait 
        sleep 5
    else
        prState=''
        while [[ $prState != 'Succeeded' ]];
        do
            prState=$(az network vnet-gateway show -g $rg -n $branch1name-vpngw --query provisioningState -o tsv)
            echo "$branch1name-vpngw provisioningState="$prState
            sleep 5
        done
    fi
    echo Validating vHubs VPN Gateways provisioning...
    #vWAN Hubs VPN Gateway Status
    prState=$(az network vpn-gateway show -g $rg -n $hub1name-vpngw --query provisioningState -o tsv)
    if [[ $prState == 'Failed' ]];
    then
        echo VPN Gateway is in fail state. Deleting and rebuilding.
        az network vpn-gateway delete -n $hub1name-vpngw -g $rg
        az network vpn-gateway create -n $hub1name-vpngw -g $rg --location $region1 --vhub $hub1name --no-wait
        sleep 5
    else
        prState=''
        while [[ $prState != 'Succeeded' ]];
        do
            prState=$(az network vpn-gateway show -g $rg -n $hub1name-vpngw --query provisioningState -o tsv)
            echo $hub1name-vpngw "provisioningState="$prState
            sleep 5
        done
    fi
    echo Building VPN connections from VPN Gateways to the respective Branches...
    # get bgp peering and public ip addresses of VPN GW and VWAN to set up connection
    # Branch 1 and Hub1 VPN Gateway variables
    bgp1=$(az network vnet-gateway show -n $branch1name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
    pip1=$(az network vnet-gateway show -n $branch1name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)
    vwanh1gwbgp1=$(az network vpn-gateway show -n $hub1name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
    vwanh1gwpip1=$(az network vpn-gateway show -n $hub1name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)
    vwanh1gwbgp2=$(az network vpn-gateway show -n $hub1name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].defaultBgpIpAddresses[0]' -o tsv)
    vwanh1gwpip2=$(az network vpn-gateway show -n $hub1name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].tunnelIpAddresses[0]' -o tsv)
    az network vpn-site create --ip-address $pip1 -n site-$branch1name -g $rg --asn 65010 --bgp-peering-address $bgp1 -l $region1 --virtual-wan $vwanname --device-model 'Azure' --device-vendor 'Microsoft' --link-speed '50' --with-link true --output none
    az network vpn-gateway connection create --gateway-name $hub1name-vpngw -n site-$branch1name-conn -g $rg --enable-bgp true --remote-vpn-site site-$branch1name --internet-security --shared-key 'abc123' --output none
    # create connections from vpn gw to local gateway and watch for connection succeeded
    az network local-gateway create -g $rg -n lng-$hub1name-gw1 --gateway-ip-address $vwanh1gwpip1 --asn 65515 --bgp-peering-address $vwanh1gwbgp1 -l $region1 --output none
    az network vpn-connection create -n $branch1name-to-$hub1name-gw1 -g $rg -l $region1 --vnet-gateway1 $branch1name-vpngw --local-gateway2 lng-$hub1name-gw1 --enable-bgp --shared-key 'abc123' --output none
    az network local-gateway create -g $rg -n lng-$hub1name-gw2 --gateway-ip-address $vwanh1gwpip2 --asn 65515 --bgp-peering-address $vwanh1gwbgp2 -l $region1 --output none
    az network vpn-connection create -n $branch1name-to-$hub1name-gw2 -g $rg -l $region1 --vnet-gateway1 $branch1name-vpngw --local-gateway2 lng-$hub1name-gw2 --enable-bgp --shared-key 'abc123' --output none
fi

if [ $branch2Enabled  = 'true' ];
    then
    # create location2 branch virtual network
    az network vnet create --address-prefixes 10.200.0.0/16 -n $branch2name -g $rg -l $region2 --subnet-name main --subnet-prefixes 10.200.0.0/24 --output none
    az network public-ip create -n $branch2name-vpngw-pip -g $rg --location $region2 --sku standard --output none
    az network vnet subnet create -g $rg --vnet-name $branch2name -n GatewaySubnet --address-prefixes 10.200.100.0/26 --output none
    az network vnet-gateway create -n $branch2name-vpngw --public-ip-addresses $branch2name-vpngw-pip -g $rg --vnet $branch2name --asn 65009 --gateway-type Vpn -l $region2 --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait
    az vm create -n branch2VM  -g $rg --image Ubuntu2204 --public-ip-sku Standard --size $vmsize -l $region2 --subnet main --vnet-name $branch2name --admin-username $username --admin-password $password --nsg "" --no-wait
    az network vpn-gateway create -n $hub2name-vpngw -g $rg --location $region2 --vhub $hub2name --no-wait
    prState=$(az network vnet-gateway show -g $rg -n $branch2name-vpngw --query provisioningState -o tsv)
    if [[ $prState == 'Failed' ]];
    then
        echo VPN Gateway is in fail state. Deleting and rebuilding.
        az network vnet-gateway delete -n $branch2name-vpngw -g $rg
        az network vnet-gateway create -n $branch2name-vpngw --public-ip-addresses $branch2name-vpngw-pip -g $rg --vnet $branch2name --asn 65009 --gateway-type Vpn -l $region2 --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait 
        sleep 5
    else
        prState=''
        while [[ $prState != 'Succeeded' ]];
        do
            prState=$(az network vnet-gateway show -g $rg -n $branch2name-vpngw --query provisioningState -o tsv)
            echo "$branch2name-vpngw provisioningState="$prState
            sleep 5
        done
    fi
    prState=$(az network vpn-gateway show -g $rg -n $hub2name-vpngw --query provisioningState -o tsv)
    if [[ $prState == 'Failed' ]];
    then
        echo VPN Gateway is in fail state. Deleting and rebuilding.
        az network vpn-gateway delete -n $hub2name-vpngw -g $rg
        az network vpn-gateway create -n $hub2name-vpngw -g $rg --location $region2 --vhub $hub2name --no-wait
        sleep 5
    else
        prState=''
        while [[ $prState != 'Succeeded' ]];
        do
            prState=$(az network vpn-gateway show -g $rg -n $hub2name-vpngw --query provisioningState -o tsv)
            echo $hub2name-vpngw "provisioningState="$prState
            sleep 5
        done
    fi
    # Branch 2 and Hub2 VPN Gateway variables
    bgp2=$(az network vnet-gateway show -n $branch2name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
    pip2=$(az network vnet-gateway show -n $branch2name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)
    vwanh2gwbgp1=$(az network vpn-gateway show -n $hub2name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].defaultBgpIpAddresses[0]' -o tsv)
    vwanh2gwpip1=$(az network vpn-gateway show -n $hub2name-vpngw  -g $rg --query 'bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses[0]' -o tsv)
    vwanh2gwbgp2=$(az network vpn-gateway show -n $hub2name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].defaultBgpIpAddresses[0]' -o tsv)
    vwanh2gwpip2=$(az network vpn-gateway show -n $hub2name-vpngw -g $rg --query 'bgpSettings.bgpPeeringAddresses[1].tunnelIpAddresses[0]' -o tsv)
    az network vpn-site create --ip-address $pip2 -n site-$branch2name -g $rg --asn 65009 --bgp-peering-address $bgp2 -l $region2 --virtual-wan $vwanname --device-model 'Azure' --device-vendor 'Microsoft' --link-speed '50' --with-link true --output none
    az network vpn-gateway connection create --gateway-name $hub2name-vpngw -n site-$branch2name-conn -g $rg --enable-bgp true --remote-vpn-site site-$branch2name --internet-security --shared-key 'abc123' --output none
    # create connections from vpn gw to local gateway and watch for connection succeeded
    az network local-gateway create -g $rg -n lng-$hub2name-gw1 --gateway-ip-address $vwanh2gwpip1 --asn 65515 --bgp-peering-address $vwanh2gwbgp1 -l $region2 --output none
    az network vpn-connection create -n $branch2name-to-$hub2name-gw1 -g $rg -l $region2 --vnet-gateway1 $branch2name-vpngw --local-gateway2 lng-$hub2name-gw1 --enable-bgp --shared-key 'abc123' --output none
    az network local-gateway create -g $rg -n lng-$hub2name-gw2 --gateway-ip-address $vwanh2gwpip2 --asn 65515 --bgp-peering-address $vwanh2gwbgp2 -l $region2 --output none
    az network vpn-connection create -n $branch2name-to-$hub2name-gw2 -g $rg -l $region2 --vnet-gateway1 $branch2name-vpngw --local-gateway2 lng-$hub2name-gw2 --enable-bgp --shared-key 'abc123' --output none
fi

echo Creating NSGs in both branches...
#NSGs:
az network nsg create --resource-group $rg --name default-nsg-$hub1name --location $region1 -o none
az network nsg create --resource-group $rg --name default-nsg-$hub2name --location $region2 -o none

# Add my home public IP to NSG for SSH acess
az network nsg rule create -g $rg --nsg-name default-nsg-$hub1name -n 'default-allow-ssh' --direction Inbound --priority 100 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 22 --access Allow --protocol Tcp --description "Allow inbound SSH" --output none
az network nsg rule create -g $rg --nsg-name default-nsg-$hub2name -n 'default-allow-ssh' --direction Inbound --priority 100 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 22 --access Allow --protocol Tcp --description "Allow inbound SSH" --output none

# Add my home public IP to NSG for RDP acess
az network nsg rule create -g $rg --nsg-name default-nsg-$hub1name -n 'default-allow-rdp' --direction Inbound --priority 101 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 3389 --access Allow --protocol Tcp --description "Allow inbound RDP" --output none
az network nsg rule create -g $rg --nsg-name default-nsg-$hub2name -n 'default-allow-rdp' --direction Inbound --priority 101 --source-address-prefixes $mypip --source-port-ranges '*' --destination-address-prefixes '*' --destination-port-ranges 3389 --access Allow --protocol Tcp --description "Allow inbound RDP" --output none

# Associated NSG to the VNET subnets (Spokes and Branches)
az network vnet subnet update --id $(az network vnet list -g $rg --query '[?location==`'$region1'`].{id:subnets[0].id}' -o tsv) --network-security-group default-nsg-$hub1name -o none
az network vnet subnet update --id $(az network vnet list -g $rg --query '[?location==`'$region2'`].{id:subnets[0].id}' -o tsv) --network-security-group default-nsg-$hub2name -o none


vhub1Spokes=2

for ((i=1; i<=vhub1Spokes; i++))
do
  vnet_name="spk$i-vnet"
  echo "Creating virtual network spk$i-vnet..."
  az network vnet create --resource-group $rg --name $vnet_name --address-prefix 10.0.$i.0/24 --subnet-name snet-$i --subnet-prefix 10.0.$i.0/24 --output none --no-wait
done